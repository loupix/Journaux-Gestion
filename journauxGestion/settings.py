"""
Django settings for journauxGestion project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from django.utils.translation import gettext_lazy as _
from pathlib import Path
import os, sys
import inspect

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-k_!=%5fjcoov&8ygo!3$(js%%g8-=tx+e)e)fno%513u@u35cb'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
if DEBUG and 'celery' in inspect.stack()[-1][1]:
    DEBUG = False

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True
ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'clearcache', 'corsheaders',
    'djangomix', 'django_truncate',
    'django_db_logger',
    'django_celery_results',
    'rest_framework',
    'journal', 'rubrique', 'fluxrss', 'item',
    'personne', 'word', 'sentiment', 'article',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]

ROOT_URLCONF = 'journauxGestion.urls'

APPEND_SLASH=False

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'journauxGestion.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASE_HOST = "loicdaniel.fr"
DATABASE_NAME = "journaux_developpement"
DATABASE_USER = "loupix"
DATABASE_PASS = "lolo"
DATABASE_URL = "%s:%s@%s/%s" % (DATABASE_USER, DATABASE_PASS, DATABASE_HOST, DATABASE_NAME)

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': DATABASE_NAME,
        'USER': DATABASE_USER,
        'PASSWORD': DATABASE_PASS,
        'HOST': DATABASE_HOST,
        'PORT': '33666',
    },
    'development': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'journaux_development',
        'USER': 'pi',
        'PASSWORD': 'lolo',
        'HOST': 'node5',
        'PORT': '3306',
    },
    'test': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'journaux_test',
        'USER': 'pi',
        'PASSWORD': 'lolo',
        'HOST': 'node5',
        'PORT': '3306',
    },
    'production': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'journaux_production',
        'USER': 'pi',
        'PASSWORD': 'lolo',
        'HOST': 'node5',
        'PORT': '3306',
    }
}




# Redis config
REDIS_URL = "127.0.0.1"
REDIS_PORT = 6379


DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

SESSIONS_ENGINE='django.contrib.sessions.backends.cache'

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://%s:%d/1" % (REDIS_URL, REDIS_PORT),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },

    'memory': {
        'BACKEND': 'django.core.cache.backends.memcached.PyMemcacheCache',
        'LOCATION': '127.0.0.1:11211',
    }
}



LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(asctime)s %(message)s'
        },
    },
    'handlers': {
        'db_log': {
            'level': 'DEBUG',
            'class': 'django_db_logger.db_log_handler.DatabaseLogHandler'
        },
    },
    'loggers': {
        'db': {
            'handlers': ['db_log'],
            'level': 'DEBUG',
        },
        'tasks': {
            'handlers': ['db_log'],
            'level': 'INFO',
        },
        'commands': {
            'handlers': ['db_log'],
            'level': 'INFO',
        },
        'libraries': {
            'handlers': ['db_log'],
            'level': 'WARNING',
        },
        'channels': {
            'handlers': ['db_log'],
            'level': 'WARNING',
        },
        'views': {
            'handlers': ['db_log'],
            'level': 'WARNING',
        },
        'account': {
            'handlers': ['db_log'],
            'level': 'WARNING',
        },
        'django.request': { # logging 500 errors to database
            'handlers': ['db_log'],
            'level': 'ERROR',
            'propagate': False,
        }
    }
}



CHANNEL_LAYERS = {
    'default': {
        ### Method 1: Via redis lab
        # 'BACKEND': 'channels_redis.core.RedisChannelLayer',
        # 'CONFIG': {
        #     "hosts": [
        #       'redis://h:<password>;@<redis Endpoint>:<port>' 
        #     ],
        # },

        ### Method 2: Via local Redis
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
             "hosts": [(REDIS_URL, REDIS_PORT)],
        },

        ### Method 3: Via In-memory channel layer
        ## Using this method.
        # "BACKEND": "channels.layers.InMemoryChannelLayer"
    },
}




# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Paris'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'




# Celery Configuration Options
CELERY_TIMEZONE = 'Europe/Paris'
CELERY_TASK_TRACK_STARTED = True
# CELERY_TASK_SOFT_TIME_LIMIT = 3540
# CELERY_TASK_TIME_LIMIT = 3600
# CELERY_TASK_SERIALIZER = "JSON"


CELERY_CACHE_BACKEND = 'default'
CELERY_TASK_RESULT_EXPIRES = 604800
# CELERY_RESULT_BACKEND = 'django-db'


BROKER_URL = 'sqla+mysql+mysqldb://%s' % DATABASE_URL
CELERY_BROKER_URL = 'sqla+mysql+mysqldb://%s' % DATABASE_URL
CELERY_RESULT_BACKEND = 'db+mysql+mysqldb://%s' % DATABASE_URL
CELERY_RESULT_DBURI = 'db+mysql+mysqldb://%s' % DATABASE_URL

# echo enables verbose logging from SQLAlchemy.
CELERY_RESULT_ENGINE_OPTIONS = {"echo": True}

# TEST_RUNNER = 'django_nose.NoseTestSuiteRunner'
# TEST_RUNNER = 'test_utils.test_runners.keep_database'
TEST_RUNNER = 'django.test.runner.DiscoverRunner'
# TEST_RUNNER = 'discover_runner.DiscoverRunner'
